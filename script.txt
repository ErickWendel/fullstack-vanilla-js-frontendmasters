Initial Template
    app
        - src
            - platforms
                - console
                    view.js
                        console.log
                - web
                    view.js
                        console.log
            - shared
                - viewBase.js

        ui
            - index.html
                - with HTML Only
            - index.js
                - with console.log
Day 01
    - Intro
        - slides
        - what?
        - final demo
        - pre reqs
            - nodejs 22 (current LTS)
            - vscode
            - Unix based systems (WSL (Windows Subsystem for Linux))

    - Design Patterns for Universal Apps - Abstract Factory Design Pattern
        - slides
            - show iPhone and Android analogy

    - Writing Web Apps without Bundlers
        goals

    - Commonjs
        - slides
        - Problem HTML vs JS Runtimes

    - ESM
        - slides
        - async / JS Spec / dynamic

    - ESM Imports and Dynamic Imports
        - demo
            show HTML
                refer index.js as a module
            npm run web
            > show form

            - change ui/index.js
                add dynamic import
                    const path = globalThis.window ? 'web' : 'console'
                    await import(`./../src/platforms/${path}/view.js`)

            > web should print hi from web
            console.log('Hi from web')
            npm run cli
                console.log('Hi from Node.js')

    - Listing items
        - web/view.js
            add all elements mapping

            add row
            render
        - shared/controller.js
            constructor
            static init
            #init
                all but configures
        -> web should list initialData

    - Sharing Validation and Entity Layers
        view.js
            configureFormSubmit
            notify
            init
        controller.js
            #onSubmit
            isValid
            #init
                add #onSubmit

        -> web should alert when the fields are empty
        view.js
            resetForm
            configureFormClear
        controller.js
            #init
                configureFormClear
        -> after submitting should clear inputs
    - Deploying the Web App on GitHub Pages
        - setup and deploy
    - Day 1 Recap and Q&A


Day 02
    - Day 2 Introduction
        - slides
        - show demo

    - Writing CLI Apps using Node.js
        - ui/index.js
            - add bin/bash on top

        - chmod +x ui/index.js

        package.json
        npm link

    - Creating powerful interfaces on CLI apps with Blessed
        - npm i blessed@0.1.81 blessed-contrib@4.11.0

        console/layoutBuilder.js
            .setScreen
            .setLayoutComponent
            .build
        console/view.js
            #initializeComponents()
                this.#components = this.#layoutBuilder
                    .setScreen({ title: 'Fullstack vanilla JS - Erick Wendel' })
                    .setLayoutComponent()
                    .build()

            render(data) {
                #initializeComponents()
            }

        -> should see "not implemented error"
            view.js (only signatures)
                configureFormClear
                configureFormSubmit
        -> open a new terminal and should see app title

        layoutBuilder
            setFormComponent
                just create .form
            build
                add form
        view
            #initializeComponents() call setFormComponent

        -> should see the white line
        layoutBuilder
            #createInputField
            setFormComponent
                add name, email and age inputs
                nameInput.focus();

        -> should be able to fill those inputs

        layoutBuilder
            #createButton
            setFormComponent
                add submit and clear button
        -> should see buttons
    layoutBuilder
        setFormComponent
            submitButton.on
            form.on('submit', (data) => {
                console.log(data)
            })
        -> should be able to go to next fields with shift and see results after clicking on submit

    - Submitting forms from the terminal
        layoutBuilder
            setFormComponent
                form.on('submit', (data) => {
                    onSubmit
                })

                all this.#

            -> error not implemented
        view
            notify // signature only
            addRow // signature only
        -> should see message when invalid
        -> should data when valid
        layoutBuilder
            setAlertComponent
                all
        view
            notify
            #initializeComponents
                add setAlertComponent
        -> should be able to see the error message

        layoutBuilder
            setFormComponent
                clearButton.on
        view.js
            configureFormClear
            configureFormSubmit
            resetForm()
        -> should clear form after submit

    - Rendering table data on with blessed contrib
        layoutBuilder
            setTable
                all
        view
            #initializeComponents
                setTable
        -> should see an empty table
        view
            - #prepareData

            - addRow
                all
        view
            render
                items.forEach(item => this.addRow(item))

        -> should see table rendering initial data
        -> should see data on table after submit

    - Deploying the CLI App on an npm Registry
        package.json
        - author
        - name
        - npm login
        - npm publish --access-public
        - npm rm -g users-management-app
        - npm i -g @erickwendel/users-management-app

    - Creating the Web API
        mkdir app
        move all to app
        mkdir web-api

        web-api
            npm init -y
            mkdir src
            touch src/index.js

            src/index.js
                create a simple http server
            -> should be able to curl with hello world
            touch run-api.sh
                curl users
            -> should be able to see the hello world

            touch handler.js
                function handler
                    all until allRoutes
            touch util/util.js
                all

            handler.js
                allRoutes
                    only 404
                handler
                    add promise without handle error

            -> curl now should return 404

            mkdir routes/userRoutes.js

                /users:get
                    return mocked

                /users:post
            handler
                allRoutes
                    add userRoutes
            -> should be able to see mocked data
            mkdir database/data.json
                add empty array

            mkdir repositories/userRepository
                only find
            mkdir services/userService
                only find
            mkdir factories/userFactory
                all
            handler
                add userService to userRoutes
            userRoutes
                /users:get
                    all

            -> curl should return empty array

            add mocked object to data.json
            -> curl should return data
        - Creating users
        userRoute
            /users:post
                log item

        run-api.sh
            add curl post
        -> should show item coming

        userRepository
            create
                all
        userService
            create

        userRoute
            /users:post
                all
        -> should save items on data.json and list

    - Integrating the API with the apps
        touch app/shared/service.js
            all
        ui/index.js
            add service to controller
        shared/controller
            add service on constructor
            #getFromAPI()
            #init()
                add getFromAPI()
        -> should be able to list from api

        controller
            pushToAPI
                all
            #onSubmit
                add pushToAPI
        -> should be able to save on api and after refresh load it from there
        -> CLI should also work
    - Fixing tests
        controller.test.js
            add to Controller.init

             service: {
                createUser: mock.fn(async () => ({})),
                getUsers: mock.fn(async () => []),
            }
        web.test.js
            add to Controller.init

             service: {
                createUser: mock.fn(async () => ({})),
                getUsers: mock.fn(async () => []),
            }
        tests should now pass


    - web-api
        mkdir tests/e2e
            touch user.test.js
                all
        -> test should pass

    - GitHub Action
        update run_tests

        git push
        -> should pass


    - Course Recap and Q&A
done :)